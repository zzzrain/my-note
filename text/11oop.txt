1、构造函数（constructor）
创建一个新的对象，隐式调用new
给对象赋予作用域，绑定this
给对象添加方法和属性
返回新的对象

2、原型对象（prototype）
每个函数都有一个prototype属性
原型对象包含一个constructor属性
原型中的属性和方法可以被所有该对象的实例共享

3、实例（instance）
new 生成的对象
每个实例包含prototype属性指向原型
实例获取原型的方法：
xxx.__proto__：浏览器私有属性
Object.getPrototypeOf(xxx)

简单关系图：
constructor <==> prototype
instance     ==> prototype


4、判断关系（返回布尔值）
判断原型是否实例：       Xxx.isPrototypeOf(xxx)
判断原型、实例的构造函数：xxx.constructor == Xxx
判断实例的构造函数：     xxx.instanceof Xxx
判断对象的属性和方法：   xxx.hasOwnProperty()


5、 继承
继承属性：借用构造函数（传参方式不同）
fn.call(this,属性)、fn.apply(this,数组)

继承方法：原型链继承、原型式继承 
Xxx.prototype = new Obj()
Xxx.prototype = Object.create(Obj.prototype)

寄生组合继承法：借用构造函数+原型式继承

ES6类继承：class Xxx extends Obj{}

6、创建不能被遍历的对象属性
单个：Object.defineProperty(obj,'xxx',{})
多个：Object.defineProperties(obj,'xxx',{})
configurable、enumerable、writable、value
